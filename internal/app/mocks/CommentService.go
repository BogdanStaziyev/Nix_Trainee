// Code generated by mockery v2.15.0. DO NOT EDIT.

package mocks

import (
	domain "trainee/internal/domain"

	jwt "github.com/golang-jwt/jwt"

	mock "github.com/stretchr/testify/mock"

	requests "trainee/internal/infra/http/requests"
)

// CommentService is an autogenerated mock type for the CommentService type
type CommentService struct {
	mock.Mock
}

// DeleteComment provides a mock function with given fields: id
func (_m *CommentService) DeleteComment(id int64) error {
	ret := _m.Called(id)

	var r0 error
	if rf, ok := ret.Get(0).(func(int64) error); ok {
		r0 = rf(id)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// GetComment provides a mock function with given fields: id
func (_m *CommentService) GetComment(id int64) (domain.Comment, error) {
	ret := _m.Called(id)

	var r0 domain.Comment
	if rf, ok := ret.Get(0).(func(int64) domain.Comment); ok {
		r0 = rf(id)
	} else {
		r0 = ret.Get(0).(domain.Comment)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(int64) error); ok {
		r1 = rf(id)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetCommentsByPostID provides a mock function with given fields: postID
func (_m *CommentService) GetCommentsByPostID(postID int64) ([]domain.Comment, error) {
	ret := _m.Called(postID)

	var r0 []domain.Comment
	if rf, ok := ret.Get(0).(func(int64) []domain.Comment); ok {
		r0 = rf(postID)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]domain.Comment)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(int64) error); ok {
		r1 = rf(postID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// SaveComment provides a mock function with given fields: commentRequest, postID, token
func (_m *CommentService) SaveComment(commentRequest requests.CommentRequest, postID int64, token *jwt.Token) (domain.Comment, error) {
	ret := _m.Called(commentRequest, postID, token)

	var r0 domain.Comment
	if rf, ok := ret.Get(0).(func(requests.CommentRequest, int64, *jwt.Token) domain.Comment); ok {
		r0 = rf(commentRequest, postID, token)
	} else {
		r0 = ret.Get(0).(domain.Comment)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(requests.CommentRequest, int64, *jwt.Token) error); ok {
		r1 = rf(commentRequest, postID, token)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// UpdateComment provides a mock function with given fields: commentRequest, id
func (_m *CommentService) UpdateComment(commentRequest requests.CommentRequest, id int64) (domain.Comment, error) {
	ret := _m.Called(commentRequest, id)

	var r0 domain.Comment
	if rf, ok := ret.Get(0).(func(requests.CommentRequest, int64) domain.Comment); ok {
		r0 = rf(commentRequest, id)
	} else {
		r0 = ret.Get(0).(domain.Comment)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(requests.CommentRequest, int64) error); ok {
		r1 = rf(commentRequest, id)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

type mockConstructorTestingTNewCommentService interface {
	mock.TestingT
	Cleanup(func())
}

// NewCommentService creates a new instance of CommentService. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
func NewCommentService(t mockConstructorTestingTNewCommentService) *CommentService {
	mock := &CommentService{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
