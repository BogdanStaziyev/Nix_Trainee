// Code generated by mockery v2.14.0. DO NOT EDIT.

package mocks

import (
	domain "trainee/internal/domain"

	jwt "github.com/golang-jwt/jwt"

	mock "github.com/stretchr/testify/mock"

	requests "trainee/internal/infra/http/requests"
)

// PostService is an autogenerated mock type for the PostService type
type PostService struct {
	mock.Mock
}

// DeletePost provides a mock function with given fields: id
func (_m *PostService) DeletePost(id int64) error {
	ret := _m.Called(id)

	var r0 error
	if rf, ok := ret.Get(0).(func(int64) error); ok {
		r0 = rf(id)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// GetPost provides a mock function with given fields: id
func (_m *PostService) GetPost(id int64) (domain.Post, error) {
	ret := _m.Called(id)

	var r0 domain.Post
	if rf, ok := ret.Get(0).(func(int64) domain.Post); ok {
		r0 = rf(id)
	} else {
		r0 = ret.Get(0).(domain.Post)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(int64) error); ok {
		r1 = rf(id)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetPostsByUser provides a mock function with given fields: userID
func (_m *PostService) GetPostsByUser(userID int64) ([]domain.Post, error) {
	ret := _m.Called(userID)

	var r0 []domain.Post
	if rf, ok := ret.Get(0).(func(int64) []domain.Post); ok {
		r0 = rf(userID)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]domain.Post)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(int64) error); ok {
		r1 = rf(userID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// SavePost provides a mock function with given fields: postRequest, token
func (_m *PostService) SavePost(postRequest requests.PostRequest, token *jwt.Token) (domain.Post, error) {
	ret := _m.Called(postRequest, token)

	var r0 domain.Post
	if rf, ok := ret.Get(0).(func(requests.PostRequest, *jwt.Token) domain.Post); ok {
		r0 = rf(postRequest, token)
	} else {
		r0 = ret.Get(0).(domain.Post)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(requests.PostRequest, *jwt.Token) error); ok {
		r1 = rf(postRequest, token)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// UpdatePost provides a mock function with given fields: postRequest, postID
func (_m *PostService) UpdatePost(postRequest requests.PostRequest, postID int64) (domain.Post, error) {
	ret := _m.Called(postRequest, postID)

	var r0 domain.Post
	if rf, ok := ret.Get(0).(func(requests.PostRequest, int64) domain.Post); ok {
		r0 = rf(postRequest, postID)
	} else {
		r0 = ret.Get(0).(domain.Post)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(requests.PostRequest, int64) error); ok {
		r1 = rf(postRequest, postID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

type mockConstructorTestingTNewPostService interface {
	mock.TestingT
	Cleanup(func())
}

// NewPostService creates a new instance of PostService. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
func NewPostService(t mockConstructorTestingTNewPostService) *PostService {
	mock := &PostService{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
